// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "fm/api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateRelationship provides a mock function with given fields: ctx, _a1
func (_m *Repository) CreateRelationship(ctx context.Context, _a1 models.Relationship) (models.Relationship, error) {
	ret := _m.Called(ctx, _a1)

	var r0 models.Relationship
	if rf, ok := ret.Get(0).(func(context.Context, models.Relationship) models.Relationship); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(models.Relationship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Relationship) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFriendList provides a mock function with given fields: ctx, id
func (_m *Repository) FindFriendList(ctx context.Context, id int64) ([]models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotificationList provides a mock function with given fields: ctx, id
func (_m *Repository) FindNotificationList(ctx context.Context, id int64) ([]models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRelationshipWithTwoEmail provides a mock function with given fields: ctx, requesterID, addresseeID
func (_m *Repository) FindRelationshipWithTwoEmail(ctx context.Context, requesterID int64, addresseeID int64) (models.Relationship, error) {
	ret := _m.Called(ctx, requesterID, addresseeID)

	var r0 models.Relationship
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) models.Relationship); ok {
		r0 = rf(ctx, requesterID, addresseeID)
	} else {
		r0 = ret.Get(0).(models.Relationship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, requesterID, addresseeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationship provides a mock function with given fields: ctx, _a1
func (_m *Repository) UpdateRelationship(ctx context.Context, _a1 models.Relationship) (models.Relationship, error) {
	ret := _m.Called(ctx, _a1)

	var r0 models.Relationship
	if rf, ok := ret.Get(0).(func(context.Context, models.Relationship) models.Relationship); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(models.Relationship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Relationship) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
